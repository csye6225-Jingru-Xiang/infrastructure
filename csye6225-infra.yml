AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE6225 Network and DB Infrastructure
Parameters:
  VpcCIDR:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  Subnet1CIDR:
    Description: "CIDR block for Subnet 1"
    Type: String
    Default: "10.0.0.0/24"
  Subnet2CIDR:
    Description: "CIDR block for Subnet 2"
    Type: String
    Default: "10.0.1.0/24"
  Subnet3CIDR:
    Description: "CIDR block for Subnet 3"
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnet1CIDR:
    Description: "CIDR block for private Subnet 1"
    Type: String
    Default: "10.0.6.0/24"
  PrivateSubnet2CIDR:
    Description: "CIDR block for private Subnet 2"
    Type: String
    Default: "10.0.7.0/24"
  PrivateSubnet3CIDR:
    Description: "CIDR block for private Subnet 3"
    Type: String
    Default: "10.0.8.0/24"
  AMI:
    Description: "AMI ID"
    Type: String
  S3BucketName:
    Description: "Private S3 bucket name"
    Type: String
    Default: xjrbucket
  HostedZone:
    Description: "Hosted zone for DNS"
    Type: String
    Default: prod.rubyxjr.me.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref Subnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [3, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [4, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [5, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: application
      GroupDescription: Security group for webservice application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 433
          ToPort: 433
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: EC2SecurityGroup
    Properties:
      GroupName: database
      GroupDescription: Security group for MySQL database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          Description: "Allow connections to a MySql DB instance"
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: !Ref VPC
  EC2InstanceDev:
    Type: AWS::EC2::Instance
    DependsOn:
      - InternetGatewayAttachment
      - IAMInstanceProfile
    Properties:
      ImageId: !Ref AMI
      InstanceType: t2.micro
      SecurityGroupIds: [!Ref EC2SecurityGroup]
      SubnetId: !Ref PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: "gp2"
            DeleteOnTermination: true
      IamInstanceProfile: !Ref IAMInstanceProfile
      KeyName: dev-ec2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            cd /etc/systemd/system/
            sudo touch app.conf
            sudo echo 'S3_BUCKET_NAME=${S3PrivateBucket}' >> ./app.conf
            sudo echo 'DB_USERNAME=csye6225' >> ./app.conf
            sudo echo 'DB_PASSWORD=*passwordcsye6225' >> ./app.conf
            sudo echo 'DB_ENDPOINT=${DBEndpoint}'  >> ./app.conf
            sudo systemctl daemon-reload
            sudo systemctl start app
            sudo cp /home/ubuntu/cloudwatch.json /opt/cloudwatch-config.json
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/opt/cloudwatch-config.json \
              -s
          - DBEndpoint: !GetAtt RDSInstance.Endpoint.Address
  S3PrivateBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      BucketName:
        !Join [
            ".",
            [!Select [2, !Split ["/", !Ref AWS::StackId]], !Ref S3BucketName],
        ]
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Prefix: standard_ia
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  RDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for MySQL database
      Family: mysql8.0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  RDSSubnetsGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        !Join ["", ["RDS Subnet Group for", !Ref AWS::StackName]]
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSubnetsGroup
      - RDSSecurityGroup
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: mysql
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      MasterUsername: csye6225
      MasterUserPassword: "*passwordcsye6225"
      DBSubnetGroupName: !Ref RDSSubnetsGroup
      PubliclyAccessible: false
      DBName: CSYE6225
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBParameterGroupName: !Ref RDSParamGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  IAMPolicyForS3:
    Type: AWS::IAM::Policy
    DependsOn: IAMRoleForS3
    Properties:
      PolicyName: csye6225-s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: ["s3:*Object", "s3:ListBucket"]
            Effect: Allow
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref S3PrivateBucket]]
              - !Join ["", ["arn:aws:s3:::", !Ref S3PrivateBucket, "/*"]]
      Roles: [!Ref IAMRoleForS3]
  IAMRoleForS3:
    Type: AWS::IAM::Role
    Description: IAM role for accessing private s3 bucket
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: EC2-CSYE6225
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles:
        - !Ref IAMRoleForS3
  SiteDomainName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZone
      RecordSets:
        - Name: "prod.rubyxjr.me"
          Type: A
          TTL: 60
          ResourceRecords:
            - !GetAtt EC2InstanceDev.PublicIp
  IAMPolicyForEC2ToPublishSNS:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CSYE6225-EC2-SNS
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: [ "sns:Publish" ]
            Effect: Allow
            Resource: !Ref SNSForEmailVerification
      Roles:
        - !Ref IAMRoleForS3
  IAMPolicyForEC2DynamoDB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CSYE6225-EC2-Dynamo
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: [ "dynamodb:Get*", "dynamodb:List*", "dynamodb:PutItem" ]
            Effect: Allow
            Resource: !GetAtt DynamoDBForOneTimeToken.Arn
      Roles:
        - !Ref IAMRoleForS3
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: IAMRoleForLambdaFunction
    Properties:
      Role: !GetAtt IAMRoleForLambdaFunction.Arn
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 30
      FunctionName: csye6225-email-verification
      Code:
        ZipFile: |
          const aws = require("aws-sdk");
          const ses = new aws.SES({ region: "us-east-1" });
          exports.handler = async function (event) {
            const message = JSON.parse(event.Records[0].Sns.Message);
            console.log("Message received from SNS:", message);
            const { username, one_time_token } = message;
            const params = {
              Destination: {
                ToAddresses: [username],
              },
              Message: {
                Body: {
                  Text: {
                    Data: `Click the link below to verify your email address: http://prod.rubyxjr.me/v1/verifyUserEmail?email=${username}&token=${one_time_token}`,
                  },
                },
                Subject: { Data: "Email Verification" },
              },
              Source: "no-reply@prod.rubyxjr.me",
            };
            return ses.sendEmail(params).promise();
          };
  SNSForEmailVerification:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: csye6225-email-verification
      FifoTopic: 'false'
      Subscription:
        - Endpoint: arn:aws:lambda:us-east-1:873250706640:function:csye6225-email-verification
          Protocol: lambda
  SNSSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSForEmailVerification
      Protocol: LAMBDA
      Endpoint: !GetAtt LambdaFunction.Arn
  IAMRoleForLambdaFunction:
    Type: AWS::IAM::Role
    Description: Permission to write Amazon CloudWatch Logs
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: lambda-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  IAMPolicyForLambdaSES:
    Type: AWS::IAM::Policy
    DependsOn: IAMRoleForLambdaFunction
    Properties:
      PolicyName: CSYE6225-Lambda-SES
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: [ "ses:SendEmail", "ses:SendRawEmail" ]
            Effect: Allow
            Resource: "*"
      Roles:
        - !Ref IAMRoleForLambdaFunction
  LambdaFunctionAlias:
    Type: AWS::Lambda::Alias
    DependsOn: LambdaFunction
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: $LATEST
      Name: !Join [ "", [ !Ref LambdaFunction, "-alias" ] ]
  LambdaFunctionSNSTrigger:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSForEmailVerification
  DynamoDBForOneTimeToken:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "user_details"
      AttributeDefinitions:
        - AttributeName: "Email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TimeToLiveSpecification:
        AttributeName: "ExpireTime"
        Enabled: true
Outputs:
  VpcId:
    Description: "The VPC ID"
    Value: !Ref VPC
  Subnet1Id:
    Description: "Subnet 1 ID"
    Value: !Ref PublicSubnet1
  Subnet2Id:
    Description: "Subnet 2 ID"
    Value: !Ref PublicSubnet2
  Subnet3Id:
    Description: "Subnet 3 ID"
    Value: !Ref PublicSubnet3
  SecurityGroupId:
    Description: "EC2 Security Group Id for AMI"
    Value: !Ref EC2SecurityGroup
  EC2InstanceId:
    Description: "EC2 Instance ID"
    Value: !Ref EC2InstanceDev
  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2
  PrivateSubnet3Id:
    Description: "Private Subnet 3 ID"
    Value: !Ref PrivateSubnet3
  S3PrivateBucket:
    Description: "S3 Private Bucket for Storing Users' Profile Pictures"
    Value: !Ref S3PrivateBucket
  RDSInstanceEndpoint:
    Description: "Endpoint of MySQL RDS Instance"
    Value: !GetAtt RDSInstance.Endpoint.Address
